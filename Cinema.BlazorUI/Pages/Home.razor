@page "/"
@using Cinema.BlazorUI.Components.Home.Slider
@using Cinema.BlazorUI.Components.Home.Carousel
@namespace Cinema.BlazorUI.Pages.Home

<PageTitle>Home</PageTitle>

<div class="homePage">
    <div class="homePage-container">
        <Slider Movies="@Movies" />

        <div class="filters">
            <div class="item">
                <div class="item-container">
                    <div class="icon">
                        <img src="images/home/date.svg" alt="">
                    </div>

                    <div class="selector">
                        <select @bind="selectedDate" @bind:after="FilterMovies">
                            <option value="" disabled selected>Select Date</option>
                            @foreach (var date in dates)
                            {
                                <option value="@date">@date</option>
                            }
                        </select>
                        <button class="clear-button @(string.IsNullOrEmpty(selectedDate) ? "hidden" : "")" 
                                @onclick="() => ClearFilter(FilterType.Date)">
                            <img src="images/close.svg" alt="clear">
                        </button>
                    </div>
                </div>
            </div>
            <div class="item">
                <div class="item-container">
                    <div class="icon">
                        <img src="images/home/date.svg" alt="">
                    </div>

                    <div class="selector">
                        <select @bind="selectedSessionTime" @bind:after="FilterMovies">
                            <option value="" disabled selected>Select session time</option>
                            @foreach (var time in sessionTimes)
                            {
                                <option value="@time">@time</option>
                            }
                        </select>
                        <button class="clear-button @(string.IsNullOrEmpty(selectedSessionTime) ? "hidden" : "")" 
                                @onclick="() => ClearFilter(FilterType.Time)">
                            <img src="images/close.svg" alt="clear">
                        </button>
                    </div>
                </div>
            </div>
            <div class="item">
                <div class="item-container">
                    <div class="icon">
                        <img src="images/home/date.svg" alt="">
                    </div>

                    <div class="selector">
                        <select @bind="selectedGenre" @bind:after="FilterMovies">
                            <option value="" disabled selected>Select genre</option>
                            @foreach (var genre in genres)
                            {
                                <option value="@genre">@genre</option>
                            }
                        </select>
                        <button class="clear-button @(string.IsNullOrEmpty(selectedGenre) ? "hidden" : "")" 
                                @onclick="() => ClearFilter(FilterType.Genre)">
                            <img src="images/close.svg" alt="clear">
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <div class="type">
            <div class="title">Today sessions</div>

            <Carousel Movies="@TodayMovies" />
        </div>

        <div class="type">
            <div class="title">Movies</div>

            <Carousel Movies="@FilteredMovies" />
        </div>

        <div class="footerAd">
            <img src="images/home/ad2.png" alt="">
        </div>
    </div>
</div>

@code {

    private string selectedDate = "";
    private string selectedSessionTime = "";
    private string selectedGenre = "";
    private string[] dates;
    private string[] sessionTimes;
    private string[] genres;
    private List<Movie> Movies = new()
    {
      new Movie { Title = "Movie 1", ImageUrl = "https://www.themoviedb.org/t/p/w600_and_h900_bestv2/crDALXiyHVZg2xIIErMaBmTC3e3.jpg", Id = 1, SearchId = 1, Genre = "Action", Sessions = new List<Session> { new Session { Id = 1, MovieId = 1, Date = new DateTime(2025, 2, 4, 10, 0, 0) } } },
      new Movie { Title = "Movie 2", ImageUrl = "https://www.themoviedb.org/t/p/w600_and_h900_bestv2/vtdEHG1j07PqLlVyhKNZRHTPKGt.jpg", Id = 2, SearchId = 2, Genre = "Adventure", Sessions = new List<Session> { new Session { Id = 1, MovieId = 2, Date = new DateTime(2024, 2, 1, 10, 0, 0) } } },
      new Movie { Title = "Movie 3", ImageUrl = "https://www.themoviedb.org/t/p/w600_and_h900_bestv2/3rTNq7sgAoAKNK8axPYA6MoBO83.jpg", Id = 3, SearchId = 3, Genre = "Comedy", Sessions = new List<Session> { new Session { Id = 1, MovieId = 3, Date = new DateTime(2024, 3, 1, 10, 0, 0) } } },
      new Movie { Title = "Movie 2", ImageUrl = "https://www.themoviedb.org/t/p/w600_and_h900_bestv2/2gEFiAeJdboFcd0LoCWCH062NQO.jpg", Id = 4, SearchId = 4, Genre = "Drama", Sessions = new List<Session> { new Session { Id = 1, MovieId = 4, Date = new DateTime(2024, 4, 1, 10, 0, 0) } } },
      new Movie { Title = "Movie 3", ImageUrl = "https://www.themoviedb.org/t/p/w600_and_h900_bestv2/jtsJ0B0CXWVob325mYuw4lJlP1u.jpg", Id = 5, SearchId = 5, Genre = "Fantasy", Sessions = new List<Session> { new Session { Id = 1, MovieId = 5, Date = new DateTime(2024, 5, 1, 10, 0, 0) } } },
      new Movie { Title = "Movie 3", ImageUrl = "https://www.themoviedb.org/t/p/w600_and_h900_bestv2/fiMBvj4SBHX0MNTrAV2wszoFzdn.jpg", Id = 6, SearchId = 6, Genre = "Horror", Sessions = new List<Session> { new Session { Id = 1, MovieId = 6, Date = new DateTime(2024, 6, 1, 10, 0, 0) } } },
      new Movie { Title = "Movie 2", ImageUrl = "https://www.themoviedb.org/t/p/w600_and_h900_bestv2/ckyYZf5cGTSOwF8LWIRqeThyh18.jpg", Id = 7, SearchId = 7, Genre = "Mystery", Sessions = new List<Session> { new Session { Id = 1, MovieId = 7, Date = new DateTime(2024, 7, 1, 10, 0, 0) } } },
      new Movie { Title = "Movie 3", ImageUrl = "https://www.themoviedb.org/t/p/w600_and_h900_bestv2/tzWswZ7gL6A8Znw0dFGjnBdsUXW.jpg", Id = 8, SearchId = 8, Genre = "Romance", Sessions = new List<Session> { new Session { Id = 1, MovieId = 8, Date = new DateTime(2024, 1, 1, 10, 0, 0) } } },
    };

    private List<Movie> FilteredMovies;
    private List<Movie> TodayMovies;

    protected override void OnInitialized()
    {
        dates = GetAvailableDates();
        sessionTimes = GetAvailableSessionsTime();
        genres = GetGenres();
        FilteredMovies = Movies;
        TodayMovies = GetTodayMovies();
    }


    private void FilterMovies()
    {
        FilteredMovies = Movies.Where(movie =>
        {
            bool dateMatch = string.IsNullOrEmpty(selectedDate) || 
                movie.Sessions.Any(s => s.Date.ToString("yyyy-MM-dd") == selectedDate);
            
            bool timeMatch = string.IsNullOrEmpty(selectedSessionTime) || 
                movie.Sessions.Any(s => s.Date.ToString("HH:mm") == selectedSessionTime);
            
            bool genreMatch = string.IsNullOrEmpty(selectedGenre) || 
                movie.Genre == selectedGenre;

            return dateMatch && timeMatch && genreMatch;
        }).ToList();
    }

    private List<Movie> GetTodayMovies() {
        DateTime today = DateTime.Today;
        return Movies.Where(movie => movie.Sessions.Any(s => s.Date.Date == today.Date))
                    .OrderBy(movie => movie.Sessions.First().Date)
                    .ToList();
    }

    public string[] GetAvailableDates() {
        List<string> list = new();


        foreach (var movie in Movies) {
            foreach (var session in movie.Sessions) {
                list.Add(session.Date.ToString("yyyy-MM-dd"));
            }
        }

        return list.Distinct().ToArray();
    }

    public string[] GetAvailableSessionsTime() {
        List<string> list = new();

        foreach (var movie in Movies) {
            foreach (var session in movie.Sessions) {
                list.Add(session.Date.ToString("HH:mm"));
            }
        }

        return list.Distinct().ToArray();
    }

    public string[] GetGenres() {
        List<string> list = new();

        foreach (var movie in Movies) {
            list.Add(movie.Genre);
        }

        return list.Distinct().ToArray();
    }

    private enum FilterType
    {
        Date,
        Time,
        Genre
    }

    private void ClearFilter(FilterType filterType)
    {
        switch (filterType)
        {
            case FilterType.Date:
                selectedDate = "";
                break;
            case FilterType.Time:
                selectedSessionTime = "";
                break;
            case FilterType.Genre:
                selectedGenre = "";
                break;
        }
        FilterMovies();
    }

    public class Movie {
        public string Title { get; set; }
        public string ImageUrl { get; set; }
        public int Id { get; set; }
        public int SearchId { get; set; }
        public string Genre { get; set; }

        public List<Session> Sessions { get; set; } = new();
    }

    public class Session {
        public int Id { get; set; }
        public int MovieId { get; set; }
        public DateTime Date { get; set; }
    }
}