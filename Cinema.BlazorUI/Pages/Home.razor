@page "/"
@using Cinema.BlazorUI.Components.Home.Slider
@using Cinema.BlazorUI.Components.Home.Carousel
@using Cinema.BlazorUI.Model
@inject IMovieService movieService
@inject NavigationManager NavigationManager
@namespace Cinema.BlazorUI.Pages.Home

<PageTitle>Home</PageTitle>

<div class="homePage">
    <div class="homePage-container">
        @if (Movies == null)
        {
            <div class="loading-container">
                <p>Loading movies...</p>
            </div>
        }
        else if (!Movies.Any())
        {
            <div class="no-movies-container">
                <p>No movies available at the moment.</p>
            </div>
        }
        else
        {
            <Slider Movies="@Movies" OnMovieClick="@NavigateToMovie" />

            <div class="filters">
                <div class="item">
                    <div class="item-container">
                        <div class="icon">
                            <img src="images/home/date.svg" alt="">
                        </div>

                        <div class="selector">
                            <select @bind="selectedDate" @bind:after="FilterMovies">
                                <option value="" disabled selected>Select Date</option>
                                @if (dates != null) {
                                    foreach (var date in dates)
                                    {
                                        <option value="@date">@date</option>
                                    }
                                }
                            </select>
                            <button class="clear-button @(string.IsNullOrEmpty(selectedDate) ? "hidden" : "")" 
                                    @onclick="() => ClearFilter(FilterType.Date)">
                                <img src="images/close.svg" alt="clear">
                            </button>
                        </div>
                    </div>
                </div>
                <div class="item">
                    <div class="item-container">
                        <div class="icon">
                            <img src="images/home/date.svg" alt="">
                        </div>

                        <div class="selector">
                            <select @bind="selectedSessionTime" @bind:after="FilterMovies">
                                <option value="" disabled selected>Select session time</option>
                                @if (sessionTimes != null) {
                                    foreach (var time in sessionTimes)
                                    {
                                        <option value="@time">@time</option>
                                    }
                                }
                            </select>
                            <button class="clear-button @(string.IsNullOrEmpty(selectedSessionTime) ? "hidden" : "")" 
                                    @onclick="() => ClearFilter(FilterType.Time)">

                                <img src="images/close.svg" alt="clear">
                            </button>
                        </div>
                    </div>
                </div>
                <div class="item">
                    <div class="item-container">
                        <div class="icon">
                            <img src="images/home/date.svg" alt="">
                        </div>

                        <div class="selector">
                            <select @bind="selectedGenre" @bind:after="FilterMovies">
                                <option value="" disabled selected>Select genre</option>
                                @if (genres != null) {
                                    foreach (var genre in genres)
                                    {
                                        <option value="@genre">@genre</option>
                                    }
                                }
                            </select>
                            <button class="clear-button @(string.IsNullOrEmpty(selectedGenre) ? "hidden" : "")" 
                                    @onclick="() => ClearFilter(FilterType.Genre)">
                                <img src="images/close.svg" alt="clear">
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            <div class="type">
                <div class="title">Today sessions</div>

                <Carousel Movies="@TodayMovies" OnMovieClick="@NavigateToMovie" />
            </div>

            <div class="type">
                <div class="title">Movies</div>

                <Carousel Movies="@FilteredMovies" OnMovieClick="@NavigateToMovie" />
            </div>
        }

        <div class="footerAd">
            <img src="images/home/ad2.png" alt="">
        </div>
    </div>
</div>

@code {

    private string selectedDate = "";
    private string selectedSessionTime = "";
    private string selectedGenre = "";
    private string[] dates;
    private string[] sessionTimes;
    private string[] genres;
    private List<FormattedMovie> Movies = new()
    {
      new FormattedMovie { PosterPath = "https://www.themoviedb.org/t/p/w600_and_h900_bestv2/crDALXiyHVZg2xIIErMaBmTC3e3.jpg", Id = 1, SearchId = 1, Genre = "Action", Sessions = new List<FormattedSession> { new FormattedSession { Id = 1, MovieId = 1, Date = new DateTime(2025, 2, 4, 10, 0, 0) } } },
      new FormattedMovie { PosterPath = "https://www.themoviedb.org/t/p/w600_and_h900_bestv2/vtdEHG1j07PqLlVyhKNZRHTPKGt.jpg", Id = 2, SearchId = 2, Genre = "Adventure", Sessions = new List<FormattedSession> { new FormattedSession { Id = 1, MovieId = 2, Date = new DateTime(2024, 2, 1, 10, 0, 0) } } },
      new FormattedMovie { PosterPath = "https://www.themoviedb.org/t/p/w600_and_h900_bestv2/3rTNq7sgAoAKNK8axPYA6MoBO83.jpg", Id = 3, SearchId = 3, Genre = "Comedy", Sessions = new List<FormattedSession> { new FormattedSession { Id = 1, MovieId = 3, Date = new DateTime(2024, 3, 1, 10, 0, 0) } } },
      new FormattedMovie { PosterPath = "https://www.themoviedb.org/t/p/w600_and_h900_bestv2/2gEFiAeJdboFcd0LoCWCH062NQO.jpg", Id = 4, SearchId = 4, Genre = "Drama", Sessions = new List<FormattedSession> { new FormattedSession { Id = 1, MovieId = 4, Date = new DateTime(2024, 4, 1, 10, 0, 0) } } },
      new FormattedMovie { PosterPath = "https://www.themoviedb.org/t/p/w600_and_h900_bestv2/jtsJ0B0CXWVob325mYuw4lJlP1u.jpg", Id = 5, SearchId = 5, Genre = "Fantasy", Sessions = new List<FormattedSession> { new FormattedSession { Id = 1, MovieId = 5, Date = new DateTime(2024, 5, 1, 10, 0, 0) } } },
      new FormattedMovie { PosterPath = "https://www.themoviedb.org/t/p/w600_and_h900_bestv2/fiMBvj4SBHX0MNTrAV2wszoFzdn.jpg", Id = 6, SearchId = 6, Genre = "Horror", Sessions = new List<FormattedSession> { new FormattedSession { Id = 1, MovieId = 6, Date = new DateTime(2024, 6, 1, 10, 0, 0) } } },
      new FormattedMovie { PosterPath = "https://www.themoviedb.org/t/p/w600_and_h900_bestv2/ckyYZf5cGTSOwF8LWIRqeThyh18.jpg", Id = 7, SearchId = 7, Genre = "Mystery", Sessions = new List<FormattedSession> { new FormattedSession { Id = 1, MovieId = 7, Date = new DateTime(2024, 7, 1, 10, 0, 0) } } },
      new FormattedMovie { PosterPath = "https://www.themoviedb.org/t/p/w600_and_h900_bestv2/tzWswZ7gL6A8Znw0dFGjnBdsUXW.jpg", Id = 8, SearchId = 8, Genre = "Romance", Sessions = new List<FormattedSession> { new FormattedSession { Id = 1, MovieId = 8, Date = new DateTime(2024, 1, 1, 10, 0, 0) } } },
    };

    private List<FormattedMovie> FilteredMovies;
    private List<FormattedMovie> TodayMovies;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Movies = await movieService.GetMoviesAsync();
            if (Movies != null)
            {
                dates = GetAvailableDates();
                sessionTimes = GetAvailableSessionsTime();
                genres = GetGenres();
                FilteredMovies = Movies;
                TodayMovies = GetTodayMovies();
            }
            else
            {
                Movies = new List<FormattedMovie>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading movies: {ex.Message}");
            Movies = new List<FormattedMovie>();
        }
    }


    private void FilterMovies()
    {
        FilteredMovies = Movies.Where(movie =>
        {
            bool dateMatch = string.IsNullOrEmpty(selectedDate) || 
                movie.Sessions.Any(s => s.Date.ToString("yyyy-MM-dd") == selectedDate);
            
            bool timeMatch = string.IsNullOrEmpty(selectedSessionTime) || 
                movie.Sessions.Any(s => s.Date.ToString("HH:mm") == selectedSessionTime);
            
            bool genreMatch = string.IsNullOrEmpty(selectedGenre) || 
                movie.Genre == selectedGenre;

            return dateMatch && timeMatch && genreMatch;
        }).ToList();
    }

    private List<FormattedMovie> GetTodayMovies() {
        DateTime today = DateTime.Today;
        return Movies.Where(movie => movie.Sessions != null && movie.Sessions.Any(s => s.Date.Date == today.Date))
                    .OrderBy(movie => movie.Sessions.First().Date)
                    .ToList();
    }

    public string[] GetAvailableDates() {
        List<string> list = new();


        foreach (var movie in Movies) {
            if (movie.Sessions != null) {
                foreach (var session in movie.Sessions) {
                    list.Add(session.Date.ToString("yyyy-MM-dd"));
                }
            }
        }


        return list.Distinct().ToArray();
    }

    public string[] GetAvailableSessionsTime() {
        List<string> list = new();

        foreach (var movie in Movies) {
            if (movie.Sessions != null) {
                foreach (var session in movie.Sessions) {
                    list.Add(session.Date.ToString("HH:mm"));
                }
            }
        }


        return list.Distinct().ToArray();
    }

    public string[] GetGenres() {
        List<string> list = new();

        foreach (var movie in Movies) {
            if (movie?.Genre != null) {
                list.Add(movie.Genre);
            }
        }


        return list.Distinct().ToArray();
    }

    private enum FilterType
    {
        Date,
        Time,
        Genre
    }

    private void ClearFilter(FilterType filterType)
    {
        switch (filterType)
        {
            case FilterType.Date:
                selectedDate = "";
                break;
            case FilterType.Time:
                selectedSessionTime = "";
                break;
            case FilterType.Genre:
                selectedGenre = "";
                break;
        }
        FilterMovies();
    }

    private void NavigateToMovie(int id)
    {
        Console.WriteLine($"Navigating to movie with id: {id}");
        NavigationManager.NavigateTo($"/movie/{id}");
    }
}