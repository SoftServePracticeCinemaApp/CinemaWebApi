@page "/login"
@using Cinema.UI.Model
@using Cinema.UI.Services
@inject IAccountManagement Acct
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Sign in</PageTitle>


<CascadingAuthenticationState>
  <AuthorizeView>
    <NotAuthorized>
      <div class="auth">
        <div class="auth-container">
          <div class="auth-container-block">
            <div class="auth-container-block-form">
              <div class="auth-container-block-form-title">Sign in</div>
              <div class="auth-container-block-form-item">
                <input type="text" placeholder="Email" autocomplete="on" @bind-value="email">
              </div>
              <div class="auth-container-block-form-item">
                <input type="password" placeholder="Password" autocomplete="on" @bind-value="password">
              </div>

              @if (errors && errorList.Length > 0) {
                <div class="auth-container-block-form-item">
                  @foreach (var error in errorList) {
                    <div class="auth-container-block-form-item-error">@error</div>
                  }
                </div>
              }
            </div>

            <button type="button" class="auth-container-block-button" @onclick="onLogin">Sign in</button>
          </div>
        </div>
      </div>
    </NotAuthorized>
  </AuthorizeView>
</CascadingAuthenticationState>

@code {
  public bool success, errors;
  public string email = string.Empty;
  public string password = string.Empty;
  public string[] errorList = [];

  public async Task onLogin() {
    try {
      success = errors = false;
      errorList = [];

      if (string.IsNullOrEmpty(email) || string.IsNullOrEmpty(password)) {
        errors = true;
        errorList = new string[] { "All fields are required" };
        return;
      }

      FormResult result = await Acct.LoginAsync(email, password);
      Console.WriteLine($"Login result: {result.Succeeded}");

      if (result.Succeeded) {
        success = true;
        NavigationManager.NavigateTo("/", true);
      } else {
        errors = true;
        errorList = result.ErrorList;
        StateHasChanged();
      }
    }
    catch (Exception ex) {
      Console.WriteLine($"Login error: {ex.Message}");
      errors = true;
      errorList = new string[] { "An error occurred during login. Please try again." };
      StateHasChanged();
    }
  }
}